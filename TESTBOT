import logging
import os

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# Constants
TOKEN = "5447331145:AAGa2c0VZfZ8bJFLsT_HEMID93NZbhFujFM"

# Dictionary of products and their prices
products = {
    "T-shirt": 20,
    "Jeans": 50,
    "Jacket": 80,
    "Shoes": 100
}

# List of items in the shopping cart
shopping_cart = []


def start(update, context):
    """Send a message when the command /start is issued."""
    update.message.reply_text(
        "Welcome to the online store! Use the /products command to see a list of available products and their prices.")


def product(update, context):
    """Show a list of available products and their prices."""
    text = "Here is a list of available products and their prices:\n"
    for product, price in products.items():
        text += f"{product}: ${price}\n"
    update.message.reply_text(text)


def add_to_cart(update, context):
    """Add an item to the shopping cart."""
    # Extract the product name from the command arguments
    product_name = " ".join(context.args)
    if product_name in products:
        # Add the product to the shopping cart
        shopping_cart.append(product_name)
        update.message.reply_text(f"{product_name} added to the shopping cart.")
    else:
        update.message.reply_text(f"{product_name} is not a valid product.")


def remove_from_cart(update, context):
    """Remove an item from the shopping cart."""
    # Extract the product name from the command arguments
    product_name = " ".join(context.args)
    if product_name in shopping_cart:
        # Remove the product from the shopping cart
        shopping_cart.remove(product_name)
        update.message.reply_text(f"{product_name} removed from the shopping cart.")
    else:
        update.message.reply_text(f"{product_name} is not in the shopping cart.")


def show_cart(update, context):
    """Show the items in the shopping cart and their total price."""
    if not shopping_cart:
        update.message.reply_text("The shopping cart is empty.")
        return

    total_price = 0
    text = "Here is a list of items in the shopping cart:\n"
    for item in shopping_cart:
        price = products[item]
        total_price += price
        text += f"{item}: ${price}\n"
    text += f"Total price: ${total_price}"
    update.message.reply_text(text)

def checkout(update, context):
    """Checkout and clear the shopping cart."""
    if not shopping_cart:
        update.message.reply_text("The shopping cart is empty.")
        return

    # Calculate the total price of the items in the shopping cart
    total_price = 0
    for item in shopping_cart:
        total_price += products[item]

    # Create the payment button
    payment_button = InlineKeyboardButton("Pay ${}".format(total_price), callback_data="pay")
    keyboard = [[payment_button]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Send the payment message with the payment button
    update.message.reply_text("Total price: ${}\nPress the button to pay.".format(total_price), reply_markup=reply_markup)

def pay(update, context):
    """Process the payment and clear the shopping cart."""
    query = update.callback_query
    # Clear the shopping cart
    shopping_cart.clear()
    # Send a confirmation message
    query.edit_message_text("Payment successful! Thank you for shopping at our store.")

def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main():
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater(TOKEN, use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher
# Add command handlers
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("products", product))
    dp.add_handler(CommandHandler("add", add_to_cart))
    dp.add_handler(CommandHandler("remove", remove_from_cart))
    dp.add_handler(CommandHandler("cart", show_cart))
    dp.add_handler(CommandHandler("checkout", checkout))

    # Add callback query handler
    dp.add_handler(CallbackQueryHandler(pay))

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()

if name == '__main__':
    main()
